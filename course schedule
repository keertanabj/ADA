#include <stdio.h>
#include <stdlib.h>

long countWhileMergeSort(long* prefix, int start, int end, int lower, int upper, long* temp) {
    if (end - start <= 1) return 0;
    int mid = (start + end) / 2;
    long count = 0;
    count += countWhileMergeSort(prefix, start, mid, lower, upper, temp);
    count += countWhileMergeSort(prefix, mid, end, lower, upper, temp);

    int j = mid, k = mid, t = mid;
    int r = 0;

    for (int i = start; i < mid; i++) {
        while (k < end && prefix[k] - prefix[i] < lower) k++;
        while (j < end && prefix[j] - prefix[i] <= upper) j++;
        count += j - k;
    }

    // Merge step
    int i = start, p = start;
    j = mid;
    while (i < mid && j < end) {
        if (prefix[i] < prefix[j]) temp[p++] = prefix[i++];
        else temp[p++] = prefix[j++];
    }
    while (i < mid) temp[p++] = prefix[i++];
    while (j < end) temp[p++] = prefix[j++];
    for (i = start; i < end; i++) prefix[i] = temp[i];

    return count;
}

int countRangeSum(int* nums, int numsSize, int lower, int upper) {
    long* prefix = (long*)malloc((numsSize + 1) * sizeof(long));
    long* temp = (long*)malloc((numsSize + 1) * sizeof(long));
    prefix[0] = 0;

    for (int i = 0; i < numsSize; i++) {
        prefix[i + 1] = prefix[i] + nums[i];
    }

    long result = countWhileMergeSort(prefix, 0, numsSize + 1, lower, upper, temp);
    free(prefix);
    free(temp);
    return (int)result;
}
